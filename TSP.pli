 /* Solve a given Traveling Salesman instance using the nearest neighbor
    heuristic.
    The dataset was taken from: 
    https://developers.google.com/optimization/routing/tsp
 */
 TSP : PROC OPTIONS( MAIN );

 DCL cities (13) CHAR(16) VARYING STATIC INIT ( "New York", 
 "Los Angeles", "Chicago", "Minneapolis", "Denver", "Dallas", "Seattle", 
 "Boston" ,"San Francisco" , "St. Louis", "Houston", "Phoenix", 
 "Salt Lake City");
 
 DCL adjacency_matrix (13, 13) FIXED BIN INIT (
 0, 2451, 713, 1018, 1631, 1374, 2408, 213, 2571, 875, 1420, 2145, 1972,
 2451, 0, 1745, 1524, 831, 1240, 959, 2596, 403, 1589, 1374, 357, 579,
 713, 1745, 0, 355, 920, 803, 1737, 851, 1858, 262, 940, 1453, 1260,
 1018, 1524, 355, 0, 700, 862, 1395, 1123, 1584, 466, 1056, 1280, 987,
 1631, 831, 920, 700, 0, 663, 1021, 1769, 949, 796, 879, 586, 371,
 1374, 1240, 803, 862, 663, 0, 1681, 1551, 1765, 547, 225, 887, 999,
 2408, 959, 1737, 1395, 1021, 1681, 0, 2493, 678, 1724, 1891, 1114, 701,
 213, 2596, 851, 1123, 1769, 1551, 2493, 0, 2699, 1038, 1605, 2300,2099,
 2571, 403, 1858, 1584, 949, 1765, 678, 2699, 0, 1744, 1645, 653, 600,
 875, 1589, 262, 466, 796, 547, 1724, 1038, 1744, 0, 679, 1272, 1162,
 1420, 1374, 940, 1056, 879, 225, 1891, 1605, 1645, 679, 0, 1017, 1200,
 2145, 357, 1453, 1280, 586, 887, 1114, 2300, 653, 1272, 1017, 0, 504,
 1972, 579, 1260, 987, 371, 999, 701, 2099, 600, 1162, 1200, 504, 0
 );

 DCL visited(13) FIXED BIN;
 DCL i FIXED BIN;
 DCL next_city FIXED BIN INIT (1);
 DO i = 1 TO 13;
    visited (i) = next_city ;
    next_city = get_min (adjacency_matrix, visited, i, 13);
 END;
 
 /* Get total distance traveled */
 DCL cumulative FIXED BIN INIT(0);
 DO i = 1 TO 13;
    cumulative = cumulative + adjacency_matrix (visited(i), 
                                visited (MOD(i + 1, 13)));
 END;

 PUT SKIP LIST( "Total distance:" || cumulative || " Miles");
 PUT SKIP LIST( "Itinerary:" );
 DO i = 1 TO 13;
    PUT SKIP LIST( cities(visited (i)), "-->",
                    cities(visited(MOD(i+1, 13))) );
 END;
 

 /* Procedure to search for a value in an array.
    Parameters: Array: array to search in
                val  : value to look for
    Returns 1 if found, 0 otherwise */
 in_array: PROC (array, val) RETURNS( FIXED BIN(1) );
    DCL array(*) FIXED BIN;
    DCL val FIXED BIN;

    DCL i FIXED BIN;
    DO i = 1 TO 13;
        IF array (i) = val THEN  RETURN (1);
    END;
    RETURN (0);
 END in_array;
 
 /* Searches for the minimum value in a row of the adjacency matrix
    Parameters: matrix : the adjacency matrix
                visited: the array keeping track of visited nodes
                current_row: the row to search in
                row_size: the maximum length of a row
    Returns the index of the minimum value */
 get_min : PROC (matrix, visited, current_row, row_size) 
                                                RETURNS ( FIXED BIN );
    DCL matrix (*, *) FIXED BIN;
    DCL visited (*) FIXED BIN;
    DCL current_row, row_size FIXED BIN;
    DCL current_min, current_index FIXED BIN;
    current_min  = 99999;

    DCL i FIXED BIN;
    DO i = 1 TO row_size ;
        /* ensure not to include circular paths */
        IF i ^= current_row & ^ in_array(visited, i) THEN
            IF matrix (current_row , i) < current_min THEN DO; 
                current_min = matrix (current_row, i);
                current_index = i;
            END; 
    END; 
    RETURN (current_index); 
 END get_min ;
 END TSP;